// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------------------------------------------- //
// Core User Models
// ---------------------------------------------------------------- //

model User {
  id              String         @id @default(uuid())
  name            String?
  email           String         @unique
  emailVerified   DateTime?
  image           String?
  role            Role           @default(STUDENT)
  password        String?
  accounts        Account[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  applications    Application[]
  exams           Exam[]         @relation("TeacherExams")
  attempts        Attempt[]
  StudentProfile  StudentProfile?
  TeacherProfile  TeacherProfile?

  // A student can be enrolled in multiple programs
  enrollments Enrollment[]
}

model StudentProfile {
  id                String  @id @default(uuid())
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [id])

  fullName          String
  dateOfBirth       DateTime
  age               String
  gender            String

  phoneNumber       String
  address           String

  guardianName      String?
  guardianContact   String?

  previousEducation String?
}

model TeacherProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])

  fullName          String
  phoneNumber       String
  address           String?

  highestDegree     String?
  certifications    String[]
  experienceYears   Int?
  languages         String[]
  techSkills        String[]

  bio               String?
  equipment         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // A teacher can teach many courses
  coursesTaught     Course[] @relation("TeacherCourses")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// ---------------------------------------------------------------- //
// Programs, Courses & School Structure
// ---------------------------------------------------------------- //

// This model defines the academic levels (Primary, JSS, Secondary)
model Level {
  id          String    @id @default(uuid())
  name        String    @unique // e.g., "Primary", "JSS", "Secondary"
  duration    String? // e.g., 6 (years)
  programs    Program[]
}

// This model defines the academic tracks (Arabic, Western)
model Track {
  id          String    @id @default(uuid())
  name        String    @unique // e.g., "Arabic", "Western"
  programs    Program[]
}

// The main program model now relates to Levels and Tracks
model Program {
  id          String        @id @default(uuid())
  name        String
  description String?
  duration    String?

  // New foreign keys referencing the Level and Track models
  levelId     String
  level       Level         @relation(fields: [levelId], references: [id])

  trackId     String
  track       Track         @relation(fields: [trackId], references: [id])

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // A program is composed of many courses
  courses     Course[]      @relation("ProgramToCourse")

  subjects    Subject[]     @relation("ProgramToSubject")

  // Students are enrolled in a program through the Enrollment model
  enrollments Enrollment[]
  Application Application[]
}

// Represents a specific course (e.g., "JSS1 Mathematics")
model Course {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?

  // Link to the subject (e.g., "Mathematics")
  subjectId   String
  subject     Subject       @relation(fields: [subjectId], references: [id])

  // Link to the parent program
  programs    Program[]     @relation("ProgramToCourse")

  // Many-to-many relationship with teachers
  teachers    TeacherProfile[] @relation("TeacherCourses")

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// A generic subject (e.g., Mathematics, Physics, Quranic Studies)
model Subject {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  courses     Course[]
  programs    Program[]     @relation("ProgramToSubject")
}

// Represents a student's enrollment in a specific program
model Enrollment {
  id          String   @id @default(uuid())
  studentId   String
  student     User     @relation(fields: [studentId], references: [id])

  programId   String
  program     Program  @relation(fields: [programId], references: [id])

  status      String   @default("Active")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([studentId, programId])
}

// ---------------------------------------------------------------- //
// Applications and Vacancies
// ---------------------------------------------------------------- //

model Application {
  id          String            @id @default(uuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id])

  type        AppType

  programId   String?
  program     Program?          @relation(fields: [programId], references: [id])

  vacancyId   String?
  vacancy     Vacancy?          @relation(fields: [vacancyId], references: [id])

  details     Json?

  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Vacancy {
  id          String        @id @default(uuid())
  title       String
  description String
  requirements String[]
  location    String
  type        JobType

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  applications Application[]
}

// ---------------------------------------------------------------- //
// Exams and Questions
// ---------------------------------------------------------------- //

model Exam {
  id          String       @id @default(uuid())
  title       String
  createdBy   User         @relation("TeacherExams", fields: [createdById], references: [id])
  createdById String
  questions   Question[]
  attempts    Attempt[]
}

model Question {
  id          String       @id @default(uuid())
  text        String
  type        QuestionType
  exam        Exam         @relation(fields: [examId], references: [id])
  examId      String
}

model Attempt {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  exam        Exam     @relation(fields: [examId], references: [id])
  examId      String
  score       Int?
}

// ---------------------------------------------------------------- //
// Enums
// ---------------------------------------------------------------- //

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum AppType {
  STUDENT
  TEACHER
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum QuestionType {
  MCQ
  TEXT
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}
