generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// This file is the Prisma schema.
// It defines the database models and their relationships.

// --- Enums ---

enum Role {
  admin
  teacher
  student
}

enum Status {
  pending // New user account, not yet interviewed or paid
  approved // User is active and has full access
  suspended // User access is temporarily blocked
  rejected // Application was rejected
  payment_pending_review // âœ¨ New status: Receipt uploaded, awaiting admin verification
}

enum QuestionType {
  MCQ
  TEXT
}

// --- Models ---

// Main User model with updated status and new fields for manual payment
model User {
  id                    String              @id @default(cuid())
  name                  String
  email                 String              @unique
  phone                 String?
  role                  Role                @default(student)
  status                Status              @default(pending)
  password              String
  locale                String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // New fields for the manual payment flow
  selectedProgramId     String? // Store the program the student intends to enroll in
  paymentReceiptUrl     String? // URL of the uploaded payment receipt
  paymentReceiptAmount  Int?    // Amount specified on the receipt (optional, for verification)
  
  // Relations
  studentApplication    StudentApplication?
  teacherApplication    TeacherApplication?
  subscriptions         Subscription[]
  results               Result[]
  auditLogs             AuditLog[]
}

// Student's application for enrollment
model StudentApplication {
  id             String      @id @default(cuid())
  userId         String      @unique
  desiredTrack   String
  priorLevel     String?
  interviewAt    DateTime?
  status         Status      @default(pending)
  User           User        @relation(fields: [userId], references: [id])
}

// Teacher's application for a vacancy
model TeacherApplication {
  id          String      @id @default(cuid())
  userId      String      @unique
  cvUrl       String?
  interviewAt DateTime?
  status      Status      @default(pending)
  User        User        @relation(fields: [userId], references: [id])
}

// A course of study, distinct from a subject
model Course {
  id        String    @id @default(cuid())
  name      String
  programs  Program[]
}

// A specific academic subject
model Subject {
  id        String    @id @default(cuid())
  name      String
  code      String    @unique
  track     String    // e.g., "arabic" or "western"
  programs  Program[]
}

// Levels of education (e.g., Primary 1, JSS 1)
model Level {
  id        String    @id @default(cuid())
  name      String
  programs  Program[]
}

// Academic tracks (e.g., Science, Arts)
model Track {
  id        String    @id @default(cuid())
  name      String
  programs  Program[]
}

// Core program model, now with a relation to pricing
model Program {
  id              String            @id @default(cuid())
  name            String
  description     String?
  detailedContent String?
  levelId         String
  trackId         String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  level           Level             @relation(fields: [levelId], references: [id])
  track           Track             @relation(fields: [trackId], references: [id])
  courses         Course[]
  subjects        Subject[]
  priceOptions    ProgramPricing[]
  subscriptions   Subscription[]
}

// Model to define a generic pricing plan
model PricingPlan {
  id             String            @id @default(cuid())
  name           String            // e.g., "Monthly" or "Annual"
  amountMinor    Int               // in kobo/cents
  currency       String            // e.g., "NGN"
  intervalMonths Int               // e.g., 1 or 12
  active         Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  
  // Relations
  programs       ProgramPricing[]
  subscriptions  Subscription[]
}

// Join table to link a Program to one or more PricingPlans
model ProgramPricing {
  id             String       @id @default(cuid())
  programId      String
  pricingPlanId  String
  
  // Relations
  program        Program      @relation(fields: [programId], references: [id])
  pricingPlan    PricingPlan  @relation(fields: [pricingPlanId], references: [id])
  
  @@unique([programId, pricingPlanId])
}

// A student's subscription to a program
model Subscription {
  id            String      @id @default(cuid())
  studentId     String
  programId     String
  pricingPlanId String
  startedAt     DateTime    @default(now())
  renewAt       DateTime?   // Nullable for manual payments or until renewal is due
  status        String      // "active", "overdue", "cancelled"
  provider      String      // "manual" or a payment gateway name
  providerRef   String?     // Reference ID from the provider or "MANUAL"
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  student       User        @relation(fields: [studentId], references: [id])
  program       Program     @relation(fields: [programId], references: [id])
  pricingPlan   PricingPlan @relation(fields: [pricingPlanId], references: [id])
}

// Class that a student or teacher is assigned to
model Class {
  id        String          @id @default(cuid())
  name      String
  term      Int             // 1, 2, or 3
  year      Int
  capacity  Int?
  socialUrl String?         // Link to the off-site lesson space
  subjects  ClassSubject[]
}

// Join table to assign a subject to a class and a teacher
model ClassSubject {
  id         String   @id @default(cuid())
  classId    String
  subjectId  String
  teacherId  String?
  class      Class    @relation(fields: [classId], references: [id])
  subject    Subject  @relation(fields: [subjectId], references: [id])
  teacher    User?    @relation(fields: [teacherId], references: [id])
}

// Student's enrollment in a class and subject
model StudentClassSubject {
  id         String  @id @default(cuid())
  studentId  String
  classId    String
  subjectId  String
  active     Boolean @default(true)
}

// Advertisements or announcements
model Advert {
  id           String    @id @default(cuid())
  title        String
  body         String
  kind         String    // "vacancy" or "announcement"
  visibleFrom  DateTime?
  visibleTo    DateTime?
  active       Boolean   @default(true)
}

// Exam details
model Exam {
  id            String          @id @default(cuid())
  title         String
  subjectId     String
  classId       String
  creatorId     String
  startAt       DateTime
  endAt         DateTime
  durationMin   Int
  attempts      Int             @default(1)
  randomize     Boolean         @default(true)
  antiCheat     Json?
  published     Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  questions     Question[]
  ExamAttempt   ExamAttempt[]
}

// Individual questions within an exam
model Question {
  id         String       @id @default(cuid())
  examId     String
  type       QuestionType
  body       String
  options    Json?        // for MCQ
  correct    String?      // for MCQ (key)
  points     Int
  order      Int
  exam       Exam         @relation(fields: [examId], references: [id])
  answers    Answer[]
}

// A student's attempt at an exam
model ExamAttempt {
  id          String    @id @default(cuid())
  examId      String
  studentId   String
  startedAt   DateTime
  submittedAt DateTime?
  scoreAuto   Int       @default(0)
  scoreManual Int       @default(0)
  scoreTotal  Int       @default(0)
  status      String    // "in_progress", "submitted", "graded"
  meta        Json?
  exam        Exam      @relation(fields: [examId], references: [id])
  student     User      @relation(fields: [studentId], references: [id])
  answers     Answer[]
}

// A student's answer to a question
model Answer {
  id          String      @id @default(cuid())
  attemptId   String
  questionId  String
  text        String?
  option      String?
  score       Int         @default(0)
  attempt     ExamAttempt @relation(fields: [attemptId], references: [id])
  question    Question    @relation(fields: [questionId], references: [id])
}

// Student's final result for a term
model Result {
  id           String    @id @default(cuid())
  studentId    String
  classId      String
  term         Int
  year         Int
  breakdown    Json
  aggregate    Int
  percentage   Float
  grade        String
  comment      String?
  publishedAt  DateTime?
  pdfPath      String?
  student      User      @relation(fields: [studentId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// Log of user actions for audit purposes
model AuditLog {
  id         String    @id @default(cuid())
  userId     String?
  action     String
  entity     String?
  entityId   String?
  meta       Json?
  createdAt  DateTime  @default(now())
  user       User?     @relation(fields: [userId], references: [id])
}