generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  emailVerified DateTime?
  image         String?
  role      Role
  password  String
  accounts      Account[]
  sessions      Session[]
  createdAt DateTime @default(now())
  updatedAt     DateTime  @updatedAt

  applications Application[]
  exams        Exam[]        @relation("TeacherExams")
  attempts     Attempt[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Application {
  id        String   @id @default(uuid())
  type      AppType
  status    AppStatus @default(PENDING)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime   @default(now())
}

model Exam {
  id        String   @id @default(uuid())
  title     String
  createdBy User     @relation("TeacherExams", fields: [createdById], references: [id])
  createdById String
  questions Question[]
  attempts  Attempt[]
}

model Question {
  id      String   @id @default(uuid())
  text    String
  type    QuestionType
  exam    Exam     @relation(fields: [examId], references: [id])
  examId  String
}

model Attempt {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  exam    Exam     @relation(fields: [examId], references: [id])
  examId  String
  score   Int?
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum AppType {
  STUDENT
  TEACHER
}

enum AppStatus {
  PENDING
  APPROVED
  REJECTED
}

enum QuestionType {
  MCQ
  TEXT
}
